
step : build function translating network into graph, read solutions for SCP

2 objectives : (1) min #of uavs, (2) max fto. cstrts : all elements covered by at least 2 uavs, connectivity constraint
check if which politic to use to build multiple initial solutions (different size of K, change threshold for onePassMethod ?...)


why linklist : size arrays fixed, Inserting a new element in array is expensive, since room has to be created and for this existing elements have to be shifted.

given number of available uavs : can this available max number of uavs cover all the ground nodes ?

http://www.emse.fr/~delorme/Papiers/MemoireDEA/memoire004.html

Observations : when given range is small => several uavs. But is an dvantage : SCP obtained.
	However, if too small then turn into an unimproved problem


a given graph model : Uavs are nodes, links are when 2 nodes are connected. 

Objective (among usuals) : CO, FTO (as starting, 2nd objective good that Evo algo (crossover of feasible random slns))
	RO constraint : number of 

Questions to D G Reina : if redundancy on ground nodes, what about redondancy on uavs making the network connected ?
	- using nsga2 to evaluate

proposition : for comparisons use 2d scaterplot : x : number of ground nodes (unit of tens from 50 : 50,60,70,80,etc.), y : time
	-> supposition : can heavily improve complexity in time (for cxity in #of ites, well, still a heuristic) (test code : 20 mins ???)
	-> Methods : clustering (kmeans first)

k-means : - NP-Hard (optimum)
	- heuristic : Lloyd's algorithm (and most variants) is O(nkdi) // d dimension, i number of iterations needed for convergence


The problem is NP-HARD => set a limit of iterations for finding a feasible solution => default : use a heuristic for initial solution : start with a feasible but expensive solution (worst case : one uav by ground node. see performances of kmeans with radius really small : at most, less the distance between the two closest node in search space.)

Grasp :

(++) int delta[n_Delta-2] ; // Coefficient que l'on trouvera entre chaque pair d'objectif
/*Coefficient que l'on trouvera entre chaque pair d'objectif.
 * 	seek : alpha*ob1+(1-alpha)*ob2  with alpha varying to take into account different degree of each objective.
 * 	ex : for n_Delta 10, delta[n_Delta-2]={11,22,33,...,88}
*/

(++) /* Ci après, Création des coefficients entre chaque objectifs */
	sum=n_Objectives ;
	for( int i = 1 ; i < n_Objectives ; ++i )
		sum += (n_Delta-2)*i ;
	=> if n_delta=10, and if 2 objs, then sum=2+8=10, if 3 objs, sum=3+8+16=27, etc.

(++) Construction first feasible solution : connected + all nodes covered.
	For each method compare time, complexity, results,
	1. K Means (simple clustering)
	2. Spread the UaVs uniformly over the map : map size / (2*radius-fixed constant). Fix a constant so that pair of UaVs share a space equals to that constant (kind of)

Objectives : 1.get a coverage of uavs that depends on the ground nodes and some parameters : number of uavs needed for RO
		2. minimize the number of uavs needed for the task

(++) constraints handling : only keep solution when isFeasible == true
	- or relax the problem (in param file set variable "relax"?) : if connectivity unsatisfied, cover as more ground nodes as possible
	

Mutation :
	heuristic strategies (check best) : change coordinates of uav : 1) randomly, or 2) pick uav with lowest fitness and apply move wrt delta

constraint (min) : 1 if violated. Since objective is to min, what if multiply obj*constrt ? Wrong : if obj==0 => obj*cnstrt==0. Not an option in our application, but still, easier to keep sum(cnstrts)==0.



!!!!!! Essential for using igraph everywhere :
	https://lists.nongnu.org/archive/html/igraph-help/2009-05/msg00072.html
	http://igraph.wikidot.com/testing-environment-for-python-igraph

Links : https://pdfs.semanticscholar.org/41c6/ac5ab7f8c01f6a829e7e40ae3c320f8586ec.pdf
	http://igraph.org/c/doc/igraph-Separators.html#igraph_minimum_size_separators
	http://www2.imm.dtu.dk/courses/02735/sppintro.pdf
	https://www.google.fr/search?client=ubuntu&channel=fs&q=clustering+operations+research&ie=utf-8&oe=utf-8&gfe_rd=cr&dcr=0&ei=5P6qWqfDEeGJ8QeMl7qoAw
	http://www2.imm.dtu.dk/courses/02735/sp2.pdf
	http://www2.imm.dtu.dk/courses/02735
	https://en.wikipedia.org/wiki/Minimax


