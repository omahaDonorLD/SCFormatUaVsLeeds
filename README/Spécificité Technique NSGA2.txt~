1) Composition du dossier NSGA2
2) Fonctions Nécéssaires à NSGA2



**************************************************



1) Composition du dossier NSGA2 :

	NSGA2.cpp 
	= 	Moteur de recherche évolutionnaire NSGA2 ( pas de changement requis ).


	individu.hpp
	individu.cpp	
	=	Problème et fonctions du problème que résoudra NSGA2. C'est la classe à recréer pour tout changement de problème avec les fonctions correspondantes.


	individuFactory.hpp
	individuFactory.cpp
	=	Classe secondaire permettant une aide éventuelle lors de la création d'individu. Cette classe est à modifier afin d'aider à la création d'un individu du problème éventuelle.


	output.hpp
	output.cpp
	=	Classe permettant la création de fichier comportant les valeurs d'objectifs des individus d'une population, ainsi que des statistiques sur les rangs moyens au fil du temps ( pas de changement requis ).



	param.txt
	=	Fichier de paramètre par défaut lisible par NSGA2 ( à ne pas supprimer ). A celui-ci peut être rajouté tout autre fichier de paramètres dont l'on spécifiera le nom lors du lancement de NSGA2 ( lire le README ).



	Dossier archive
	=	Comporte éventuellement d'ancienne version des fichiers actuelles. Peut être supprimé.


	Dossier data
	= 	Comporte les fichiers de données relatives aux valeurs des individus d'une génération. A ne pas supprimer/renommer


	Dossier extrem
	=	Comporte les fichiers de données relatives aux rangs des individus au fil des générations. A ne pas supprimer/renommer


	Dossier extremage
	= 	Comporte l'image relative aux données du dossier extrem. A ne pas supprimer/renommer


	Dossier image
	=	Comporte les images relatives aux données de data, optimum et pareto. A ne pas supprimer/renommer


	Dossier instances
	= 	Comporte les instances du problème à parser. ( Chemin à spécifier dans le fichier de paramètre ).


	Dossier optimum
	=	Comporte les fichier de données relatives aux valeurs des solutions exactes/de meilleure qualité existante du problème. ( Chemin à spécifier dans le fichier de paramètre ).


	Dossier pareto
	=	Comporte les fichier de données relatives aux valeurs des individus de rang 1 d'une génération. A ne pas supprimer/renommer


	Dosser results
	=	Comporte les fichiers de donnée et image relatives à la population finale une fois épurée. A ne pas supprimer/renommer




**************************************************



2) Fonctions et Paramètres Nécessaire à NSGA2 :

	individu :

		* Individu()			= Création d'un individu
		* Individu(Individu* toCopy) 	= Copie d'un individu


		* double crowding_value = valeur de crowding d'un individu dans son rang
		* double crowding_Total = valeur de crowding relative d'un individu dans une population

	
		* static int getNbrObjectives() = Permet de récupérer le nombre d'objectif du problème

	
		* int getRank() 				= Permet de récupérer le rang d'un individu
		* void setRank(int in_rank) 	= Permet de donner un rang à un individu


		* static void initProblem(string instance_path) = Permet d'initialiser le problème à partir d'une instance de donnée

	
		* static Individu* getChildFrom(Individu* parent1, Individu* parent2) = Permet l'obtention d'un enfant valide à partir de deux parents


		* int getObjectiveValue(int num_objective) = Permet de récupérer la valeur d'un individu suivant un objectif
		* int getContraintValue(int num_contraint) = Permet de récupérer la valeur d'un individu suivant une contrainte
	

		* bool domine(Individu* inIndividu) = Permet de savoir si un individu en domine un autre ou non.
		* bool isCloneOf(Individu* inIndividu) = Permet de savoir si un individu est un clône d'un autre ou non.


		* void randomize() = Permet de créer un individu de façon aléatoire ( à voir dans individuFactory )

	
		* static void createGRASPFIT(int* Coef, double alpha) = Permet la création des fitness des objets / atomicités du problème à partir des coefficients de direction ( selon chaque objectif ) et de la création de la première RCList à partir de alpha, coefficient de compromis glouton aléatoire de GRASP.
	
		* void GRASP( double alpha) = Permet la création d'un individu GRASP à partir de la fitness actuelle de chaque objet / atomicité du problème et du coefficient alpha de compromis glouton aléatoire pour GRASP. ( à voir dans individuFactory ) ( Peut être une copie de randomize() )

		* void mutate() = Permet la mutation d'un individu ( Peut être vide )
	
		* string toString() = Permet de récupérer sous forme d'un string le code génétique d'une solution.
		
		
		
	individuFactory:
	
		* IndividuFactory(string instance_path) = Permet l'appel de la fonction d'initialisation du problème


		* Individu* createRandomSolution() = Permet l'appel de création aléatoire d'un individu du problème et d'obtenir le dit individu.
		* Individu* createGraspSolution( double alpha) = Permet l'appelle de création GRASP d'un individu du problème et d'obtenir le dit individu.



**************************************************




